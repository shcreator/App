//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Product {
  id          String     @id() @default(uuid())
  name        String
  description String?
  price       Float
  fileUrl     String?
  purchases   Purchase[] @relation("product")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Purchase {
  id           String   @id() @default(uuid())
  price        Float
  purchaseDate String
  userId       String
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  productId    String
  product      Product? @relation(fields: [productId], references: [id], name: "product")
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WalletTransaction {
  id              String   @id() @default(uuid())
  amount          Float
  transactionType String
  transactionDate String
  userId          String
  user            User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated     DateTime @default(now())
  dateUpdated     DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UploadedDocument {
  id          String   @id() @default(uuid())
  fileUrl     String
  fileName    String
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                 String              @id() @default(uuid())
  name               String?
  email              String?             @unique()
  pictureUrl         String?             @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation    String?
  emailVerified      Boolean?
  stripeCustomerId   String?
  status             UserStatus          @default(VERIFIED)
  globalRole         String              @default("USER")
  /// @password
  /// @omit
  password           String?
  dateCreated        DateTime            @default(now())
  dateUpdated        DateTime            @default(now()) @updatedAt()
  accounts           Account[]
  sessions           Session[]
  pushNotifications  PushNotification[]  @relation("user")
  purchases          Purchase[]          @relation("user")
  walletTransactions WalletTransaction[] @relation("user")
  uploadedDocuments  UploadedDocument[]  @relation("user")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
